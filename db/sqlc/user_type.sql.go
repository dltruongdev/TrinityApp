// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: user_type.sql

package db

import (
	"context"
)

const createUserType = `-- name: CreateUserType :one
INSERT INTO UserTypes (type_name)
VALUES ($1)
RETURNING user_type_id, type_name
`

func (q *Queries) CreateUserType(ctx context.Context, typeName string) (Usertype, error) {
	row := q.db.QueryRowContext(ctx, createUserType, typeName)
	var i Usertype
	err := row.Scan(&i.UserTypeID, &i.TypeName)
	return i, err
}

const deleteUserType = `-- name: DeleteUserType :exec
DELETE FROM UserTypes
WHERE user_type_id = $1
`

func (q *Queries) DeleteUserType(ctx context.Context, userTypeID int32) error {
	_, err := q.db.ExecContext(ctx, deleteUserType, userTypeID)
	return err
}

const getUserTypeByID = `-- name: GetUserTypeByID :one
SELECT user_type_id, type_name
FROM UserTypes
WHERE user_type_id = $1
`

func (q *Queries) GetUserTypeByID(ctx context.Context, userTypeID int32) (Usertype, error) {
	row := q.db.QueryRowContext(ctx, getUserTypeByID, userTypeID)
	var i Usertype
	err := row.Scan(&i.UserTypeID, &i.TypeName)
	return i, err
}

const listUserTypes = `-- name: ListUserTypes :many
SELECT user_type_id, type_name
FROM UserTypes
ORDER BY 1
`

func (q *Queries) ListUserTypes(ctx context.Context) ([]Usertype, error) {
	rows, err := q.db.QueryContext(ctx, listUserTypes)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Usertype{}
	for rows.Next() {
		var i Usertype
		if err := rows.Scan(&i.UserTypeID, &i.TypeName); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateUserType = `-- name: UpdateUserType :one
UPDATE UserTypes
SET type_name = $2
WHERE user_type_id = $1
RETURNING user_type_id, type_name
`

type UpdateUserTypeParams struct {
	UserTypeID int32  `json:"user_type_id"`
	TypeName   string `json:"type_name"`
}

func (q *Queries) UpdateUserType(ctx context.Context, arg UpdateUserTypeParams) (Usertype, error) {
	row := q.db.QueryRowContext(ctx, updateUserType, arg.UserTypeID, arg.TypeName)
	var i Usertype
	err := row.Scan(&i.UserTypeID, &i.TypeName)
	return i, err
}
