// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: purchase.sql

package db

import (
	"context"
	"database/sql"
)

const createPurchase = `-- name: CreatePurchase :one
INSERT INTO Purchases (user_id, plan_id, purchase_date, amount)
VALUES ($1, $2, $3, $4)
RETURNING purchase_id, user_id, plan_id, purchase_date, amount
`

type CreatePurchaseParams struct {
	UserID       sql.NullInt32 `json:"user_id"`
	PlanID       sql.NullInt32 `json:"plan_id"`
	PurchaseDate sql.NullTime  `json:"purchase_date"`
	Amount       string        `json:"amount"`
}

type CreatePurchaseRow struct {
	PurchaseID   int32         `json:"purchase_id"`
	UserID       sql.NullInt32 `json:"user_id"`
	PlanID       sql.NullInt32 `json:"plan_id"`
	PurchaseDate sql.NullTime  `json:"purchase_date"`
	Amount       string        `json:"amount"`
}

func (q *Queries) CreatePurchase(ctx context.Context, arg CreatePurchaseParams) (CreatePurchaseRow, error) {
	row := q.db.QueryRowContext(ctx, createPurchase,
		arg.UserID,
		arg.PlanID,
		arg.PurchaseDate,
		arg.Amount,
	)
	var i CreatePurchaseRow
	err := row.Scan(
		&i.PurchaseID,
		&i.UserID,
		&i.PlanID,
		&i.PurchaseDate,
		&i.Amount,
	)
	return i, err
}

const deletePurchase = `-- name: DeletePurchase :exec
DELETE FROM Purchases
WHERE purchase_id = $1
`

func (q *Queries) DeletePurchase(ctx context.Context, purchaseID int32) error {
	_, err := q.db.ExecContext(ctx, deletePurchase, purchaseID)
	return err
}

const getPurchaseByID = `-- name: GetPurchaseByID :one
SELECT purchase_id, user_id, plan_id, purchase_date, amount
FROM Purchases
WHERE purchase_id = $1
`

type GetPurchaseByIDRow struct {
	PurchaseID   int32         `json:"purchase_id"`
	UserID       sql.NullInt32 `json:"user_id"`
	PlanID       sql.NullInt32 `json:"plan_id"`
	PurchaseDate sql.NullTime  `json:"purchase_date"`
	Amount       string        `json:"amount"`
}

func (q *Queries) GetPurchaseByID(ctx context.Context, purchaseID int32) (GetPurchaseByIDRow, error) {
	row := q.db.QueryRowContext(ctx, getPurchaseByID, purchaseID)
	var i GetPurchaseByIDRow
	err := row.Scan(
		&i.PurchaseID,
		&i.UserID,
		&i.PlanID,
		&i.PurchaseDate,
		&i.Amount,
	)
	return i, err
}

const listPurchases = `-- name: ListPurchases :many
SELECT purchase_id, user_id, plan_id, purchase_date, amount
FROM Purchases
`

type ListPurchasesRow struct {
	PurchaseID   int32         `json:"purchase_id"`
	UserID       sql.NullInt32 `json:"user_id"`
	PlanID       sql.NullInt32 `json:"plan_id"`
	PurchaseDate sql.NullTime  `json:"purchase_date"`
	Amount       string        `json:"amount"`
}

func (q *Queries) ListPurchases(ctx context.Context) ([]ListPurchasesRow, error) {
	rows, err := q.db.QueryContext(ctx, listPurchases)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []ListPurchasesRow{}
	for rows.Next() {
		var i ListPurchasesRow
		if err := rows.Scan(
			&i.PurchaseID,
			&i.UserID,
			&i.PlanID,
			&i.PurchaseDate,
			&i.Amount,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updatePurchase = `-- name: UpdatePurchase :one
UPDATE Purchases
SET user_id = $2, plan_id = $3, purchase_date = $4, amount = $5
WHERE purchase_id = $1
RETURNING purchase_id, user_id, plan_id, purchase_date, amount
`

type UpdatePurchaseParams struct {
	PurchaseID   int32         `json:"purchase_id"`
	UserID       sql.NullInt32 `json:"user_id"`
	PlanID       sql.NullInt32 `json:"plan_id"`
	PurchaseDate sql.NullTime  `json:"purchase_date"`
	Amount       string        `json:"amount"`
}

type UpdatePurchaseRow struct {
	PurchaseID   int32         `json:"purchase_id"`
	UserID       sql.NullInt32 `json:"user_id"`
	PlanID       sql.NullInt32 `json:"plan_id"`
	PurchaseDate sql.NullTime  `json:"purchase_date"`
	Amount       string        `json:"amount"`
}

func (q *Queries) UpdatePurchase(ctx context.Context, arg UpdatePurchaseParams) (UpdatePurchaseRow, error) {
	row := q.db.QueryRowContext(ctx, updatePurchase,
		arg.PurchaseID,
		arg.UserID,
		arg.PlanID,
		arg.PurchaseDate,
		arg.Amount,
	)
	var i UpdatePurchaseRow
	err := row.Scan(
		&i.PurchaseID,
		&i.UserID,
		&i.PlanID,
		&i.PurchaseDate,
		&i.Amount,
	)
	return i, err
}
