// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: user.sql

package db

import (
	"context"
	"database/sql"
)

const createUser = `-- name: CreateUser :one
INSERT INTO Users (name, email, password_hash, user_type_id)
VALUES ($1, $2, $3, $4)
RETURNING user_id, name, email, password_hash, registration_date, last_login, user_type_id
`

type CreateUserParams struct {
	Name         string        `json:"name"`
	Email        string        `json:"email"`
	PasswordHash string        `json:"password_hash"`
	UserTypeID   sql.NullInt32 `json:"user_type_id"`
}

type CreateUserRow struct {
	UserID           int32         `json:"user_id"`
	Name             string        `json:"name"`
	Email            string        `json:"email"`
	PasswordHash     string        `json:"password_hash"`
	RegistrationDate sql.NullTime  `json:"registration_date"`
	LastLogin        sql.NullTime  `json:"last_login"`
	UserTypeID       sql.NullInt32 `json:"user_type_id"`
}

func (q *Queries) CreateUser(ctx context.Context, arg CreateUserParams) (CreateUserRow, error) {
	row := q.db.QueryRowContext(ctx, createUser,
		arg.Name,
		arg.Email,
		arg.PasswordHash,
		arg.UserTypeID,
	)
	var i CreateUserRow
	err := row.Scan(
		&i.UserID,
		&i.Name,
		&i.Email,
		&i.PasswordHash,
		&i.RegistrationDate,
		&i.LastLogin,
		&i.UserTypeID,
	)
	return i, err
}

const deleteUser = `-- name: DeleteUser :exec
DELETE FROM Users
WHERE user_id = $1
`

func (q *Queries) DeleteUser(ctx context.Context, userID int32) error {
	_, err := q.db.ExecContext(ctx, deleteUser, userID)
	return err
}

const getUserByID = `-- name: GetUserByID :one
SELECT user_id, name, email, password_hash, registration_date, last_login, user_type_id, plan_id
FROM Users
WHERE user_id = $1
`

func (q *Queries) GetUserByID(ctx context.Context, userID int32) (User, error) {
	row := q.db.QueryRowContext(ctx, getUserByID, userID)
	var i User
	err := row.Scan(
		&i.UserID,
		&i.Name,
		&i.Email,
		&i.PasswordHash,
		&i.RegistrationDate,
		&i.LastLogin,
		&i.UserTypeID,
		&i.PlanID,
	)
	return i, err
}

const listUsers = `-- name: ListUsers :many
SELECT user_id, name, email, password_hash, registration_date, last_login, user_type_id, plan_id
FROM Users
ORDER BY 1
`

func (q *Queries) ListUsers(ctx context.Context) ([]User, error) {
	rows, err := q.db.QueryContext(ctx, listUsers)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []User{}
	for rows.Next() {
		var i User
		if err := rows.Scan(
			&i.UserID,
			&i.Name,
			&i.Email,
			&i.PasswordHash,
			&i.RegistrationDate,
			&i.LastLogin,
			&i.UserTypeID,
			&i.PlanID,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateUser = `-- name: UpdateUser :one
UPDATE Users
SET name = $2, password_hash = $3, last_login = $4, user_type_id = $5, plan_id = $6
WHERE user_id = $1
RETURNING user_id, name, password_hash, registration_date, last_login, user_type_id, plan_id
`

type UpdateUserParams struct {
	UserID       int32         `json:"user_id"`
	Name         string        `json:"name"`
	PasswordHash string        `json:"password_hash"`
	LastLogin    sql.NullTime  `json:"last_login"`
	UserTypeID   sql.NullInt32 `json:"user_type_id"`
	PlanID       sql.NullInt32 `json:"plan_id"`
}

type UpdateUserRow struct {
	UserID           int32         `json:"user_id"`
	Name             string        `json:"name"`
	PasswordHash     string        `json:"password_hash"`
	RegistrationDate sql.NullTime  `json:"registration_date"`
	LastLogin        sql.NullTime  `json:"last_login"`
	UserTypeID       sql.NullInt32 `json:"user_type_id"`
	PlanID           sql.NullInt32 `json:"plan_id"`
}

func (q *Queries) UpdateUser(ctx context.Context, arg UpdateUserParams) (UpdateUserRow, error) {
	row := q.db.QueryRowContext(ctx, updateUser,
		arg.UserID,
		arg.Name,
		arg.PasswordHash,
		arg.LastLogin,
		arg.UserTypeID,
		arg.PlanID,
	)
	var i UpdateUserRow
	err := row.Scan(
		&i.UserID,
		&i.Name,
		&i.PasswordHash,
		&i.RegistrationDate,
		&i.LastLogin,
		&i.UserTypeID,
		&i.PlanID,
	)
	return i, err
}
