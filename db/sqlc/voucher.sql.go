// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: voucher.sql

package db

import (
	"context"
	"time"
)

const createVoucher = `-- name: CreateVoucher :one
INSERT INTO Vouchers (user_id, campaign_id, code, valid_until)
VALUES ($1, $2, $3, $4)
RETURNING voucher_id, user_id, campaign_id, code, valid_until
`

type CreateVoucherParams struct {
	UserID     int32     `json:"user_id"`
	CampaignID int32     `json:"campaign_id"`
	Code       string    `json:"code"`
	ValidUntil time.Time `json:"valid_until"`
}

type CreateVoucherRow struct {
	VoucherID  int32     `json:"voucher_id"`
	UserID     int32     `json:"user_id"`
	CampaignID int32     `json:"campaign_id"`
	Code       string    `json:"code"`
	ValidUntil time.Time `json:"valid_until"`
}

func (q *Queries) CreateVoucher(ctx context.Context, arg CreateVoucherParams) (CreateVoucherRow, error) {
	row := q.db.QueryRowContext(ctx, createVoucher,
		arg.UserID,
		arg.CampaignID,
		arg.Code,
		arg.ValidUntil,
	)
	var i CreateVoucherRow
	err := row.Scan(
		&i.VoucherID,
		&i.UserID,
		&i.CampaignID,
		&i.Code,
		&i.ValidUntil,
	)
	return i, err
}

const deleteVoucher = `-- name: DeleteVoucher :exec
DELETE FROM Vouchers
WHERE voucher_id = $1
`

func (q *Queries) DeleteVoucher(ctx context.Context, voucherID int32) error {
	_, err := q.db.ExecContext(ctx, deleteVoucher, voucherID)
	return err
}

const getVoucherByID = `-- name: GetVoucherByID :one
SELECT voucher_id, user_id, campaign_id, code, valid_until
FROM Vouchers
WHERE voucher_id = $1
`

type GetVoucherByIDRow struct {
	VoucherID  int32     `json:"voucher_id"`
	UserID     int32     `json:"user_id"`
	CampaignID int32     `json:"campaign_id"`
	Code       string    `json:"code"`
	ValidUntil time.Time `json:"valid_until"`
}

func (q *Queries) GetVoucherByID(ctx context.Context, voucherID int32) (GetVoucherByIDRow, error) {
	row := q.db.QueryRowContext(ctx, getVoucherByID, voucherID)
	var i GetVoucherByIDRow
	err := row.Scan(
		&i.VoucherID,
		&i.UserID,
		&i.CampaignID,
		&i.Code,
		&i.ValidUntil,
	)
	return i, err
}

const updateVoucher = `-- name: UpdateVoucher :one
UPDATE Vouchers
SET user_id = $2, campaign_id = $3, code = $4, valid_until = $5
WHERE voucher_id = $1
RETURNING voucher_id, user_id, campaign_id, code, valid_until
`

type UpdateVoucherParams struct {
	VoucherID  int32     `json:"voucher_id"`
	UserID     int32     `json:"user_id"`
	CampaignID int32     `json:"campaign_id"`
	Code       string    `json:"code"`
	ValidUntil time.Time `json:"valid_until"`
}

type UpdateVoucherRow struct {
	VoucherID  int32     `json:"voucher_id"`
	UserID     int32     `json:"user_id"`
	CampaignID int32     `json:"campaign_id"`
	Code       string    `json:"code"`
	ValidUntil time.Time `json:"valid_until"`
}

func (q *Queries) UpdateVoucher(ctx context.Context, arg UpdateVoucherParams) (UpdateVoucherRow, error) {
	row := q.db.QueryRowContext(ctx, updateVoucher,
		arg.VoucherID,
		arg.UserID,
		arg.CampaignID,
		arg.Code,
		arg.ValidUntil,
	)
	var i UpdateVoucherRow
	err := row.Scan(
		&i.VoucherID,
		&i.UserID,
		&i.CampaignID,
		&i.Code,
		&i.ValidUntil,
	)
	return i, err
}
