// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: voucher.sql

package db

import (
	"context"
	"time"
)

const createVoucher = `-- name: CreateVoucher :one
INSERT INTO Vouchers (user_id, campaign_id, code, valid_until)
VALUES ($1, $2, $3, $4)
RETURNING voucher_id, user_id, campaign_id, code, valid_until
`

type CreateVoucherParams struct {
	UserID     int32     `json:"user_id"`
	CampaignID int32     `json:"campaign_id"`
	Code       string    `json:"code"`
	ValidUntil time.Time `json:"valid_until"`
}

type CreateVoucherRow struct {
	VoucherID  int32     `json:"voucher_id"`
	UserID     int32     `json:"user_id"`
	CampaignID int32     `json:"campaign_id"`
	Code       string    `json:"code"`
	ValidUntil time.Time `json:"valid_until"`
}

func (q *Queries) CreateVoucher(ctx context.Context, arg CreateVoucherParams) (CreateVoucherRow, error) {
	row := q.db.QueryRowContext(ctx, createVoucher,
		arg.UserID,
		arg.CampaignID,
		arg.Code,
		arg.ValidUntil,
	)
	var i CreateVoucherRow
	err := row.Scan(
		&i.VoucherID,
		&i.UserID,
		&i.CampaignID,
		&i.Code,
		&i.ValidUntil,
	)
	return i, err
}

const deleteVoucherByCode = `-- name: DeleteVoucherByCode :exec
DELETE FROM Vouchers
WHERE code = $1
`

func (q *Queries) DeleteVoucherByCode(ctx context.Context, code string) error {
	_, err := q.db.ExecContext(ctx, deleteVoucherByCode, code)
	return err
}

const getVoucherByCode = `-- name: GetVoucherByCode :one
SELECT voucher_id, user_id, campaign_id, code, valid_until
FROM Vouchers
WHERE code = $1
`

type GetVoucherByCodeRow struct {
	VoucherID  int32     `json:"voucher_id"`
	UserID     int32     `json:"user_id"`
	CampaignID int32     `json:"campaign_id"`
	Code       string    `json:"code"`
	ValidUntil time.Time `json:"valid_until"`
}

func (q *Queries) GetVoucherByCode(ctx context.Context, code string) (GetVoucherByCodeRow, error) {
	row := q.db.QueryRowContext(ctx, getVoucherByCode, code)
	var i GetVoucherByCodeRow
	err := row.Scan(
		&i.VoucherID,
		&i.UserID,
		&i.CampaignID,
		&i.Code,
		&i.ValidUntil,
	)
	return i, err
}

const redeemVoucher = `-- name: RedeemVoucher :execrows
UPDATE Vouchers
SET is_redeemed = TRUE, updated_at = NOW()
WHERE code = $1 AND user_id = $2 AND valid_until > NOW() AND is_redeemed = FALSE
`

type RedeemVoucherParams struct {
	Code   string `json:"code"`
	UserID int32  `json:"user_id"`
}

func (q *Queries) RedeemVoucher(ctx context.Context, arg RedeemVoucherParams) (int64, error) {
	result, err := q.db.ExecContext(ctx, redeemVoucher, arg.Code, arg.UserID)
	if err != nil {
		return 0, err
	}
	return result.RowsAffected()
}
